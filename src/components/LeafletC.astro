---
interface Props {
  regionOpacityMap: Map<string, number>;
}

let { regionOpacityMap }: Props = Astro.props;
let regionOpacityMapObject = Object.fromEntries(regionOpacityMap);
---

<div
  id="map"
  class="bg-custom-blue h-screen w-screen relative overflow-hidden"
  data-region-opacity-map={JSON.stringify(regionOpacityMapObject)}
>
</div>
<script>
  let mapElement: HTMLElement | null = document.getElementById("map");
  if (mapElement === null) {
    throw new Error("Map element not found");
  }

  let dataMap: string | undefined = mapElement.dataset.regionOpacityMap;
  if (dataMap === undefined) {
    throw new Error("Region opacity map not found");
  }

  let regionOpacityMapObject = JSON.parse(dataMap);
  let regionOpacityMap: Map<string, number> = new Map(
    Object.entries(regionOpacityMapObject)
  );

  import * as L from "leaflet";
  import * as GeoJSON from "geojson";
  document.addEventListener("DOMContentLoaded", function () {
    var map = L.map("map", {
      minZoom: 2,
      maxZoom: 6,
      worldCopyJump: true,
      attributionControl: false,
    }).setView([0, 0], 3);
    L.tileLayer(
      "https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png"
    ).addTo(map);
    fetch("regions.geojson")
      .then((response: Response) => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error("Failed to load GeoJSON file");
        }
      })
      .then((data: GeoJSON.GeoJsonObject) => {
        L.geoJSON(data, {
          onEachFeature: (feature: GeoJSON.Feature, layer: L.Layer) => {
            let properties = feature.properties;
            if (!properties) {
              return;
            }

            let code = properties["ISO_A2"].toLowerCase();
            if (code === "-99" || code.length > 2) {
              code = properties["ISO_A2_EH"].toLowerCase();
              if (code === "-99") {
                switch (properties["ADMIN"]) {
                  case "Northern Cyprus":
                    code = "cy";
                    break;
                  case "Somaliland":
                    code = "so";
                    break;
                }
              }
            }

            let opacity: number | undefined = regionOpacityMap.get(code);
            if (opacity === undefined) {
              opacity = 0;
            }

            if (layer instanceof L.Path) {
              layer.setStyle({
                color: "#ebd8d5",
                fillColor: "red",
                weight: 1,
                fillOpacity: opacity,
              });
            }

            layer.on("click", () => {
              window.location.href += code + "-1";
            });
          },
        }).addTo(map);
      })
      .catch((error: Error) => {
        throw error;
      });
  });
</script>
