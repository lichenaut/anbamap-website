---
import { DateTime } from "luxon";
import * as dbService from "../../services/db_service";
import { getRegionCodes } from "../../services/long_service";
import LeafletC from "./LeafletC.astro";
import sqlite3 from "sqlite3";

let now: number = DateTime.utc().toSeconds();
let todayStart: number = now - (now % 86400);
export let regionOpacityMap: Map<string, number> = new Map();
let region_codes = getRegionCodes();
let db: sqlite3.Database | null = null;
try {
  db = dbService.getDatabase();
  let db_2: sqlite3.Database = db;
  let promises = region_codes.map(async (code) => {
    const count = await dbService.getRegionMediaCount(
      db_2,
      code,
      todayStart - 43200,
      todayStart + 86400
    );
    regionOpacityMap.set(code, count / 50);
  });
  await Promise.all(promises);
} catch (error) {
  throw error;
} finally {
  if (db) {
    dbService.closeDatabase(db);
  }
}

interface Props {
  isDark: boolean;
}

let { isDark }: Props = Astro.props;
---

<LeafletC regionOpacityMap={regionOpacityMap} isDark={isDark} />
