---
import { DateTime } from "luxon";
import * as dbService from "../services/db_service";
import FaviconC from "../components/FaviconC.astro";
import { Image } from "astro:assets";
import * as longService from "../services/long_service";
import { MediaEntry } from "../services/db_service";
import PageManagerC from "../components/media/PageManagerC.astro";
import sqlite3 from "sqlite3";
import worldImage from "../assets/world.png";
import worldImageInverted from "../assets/world_invert.png";

let { favoritesPg } = Astro.params;
if (favoritesPg === undefined) {
  throw new Error("Favorites page is undefined");
}

let favoritesPgParts: string[] = favoritesPg.split("-");
let favorites: string = favoritesPgParts[0];
let pageString: string = favoritesPgParts[1];
let page: number = parseInt(pageString);
let now: number = DateTime.utc().toSeconds();
let todayStart: number = now - (now % 86400);
let rangeMin = todayStart - (page - 1) * 86400;
let rangeMax = todayStart - (page - 2) * 86400;
let mediaEntries: MediaEntry[] | null = null;
let db: sqlite3.Database | null = null;
try {
  db = dbService.getDatabase();
  let urlsAll: Map<string, string[]> = await dbService.getUrlsAll(db);
  mediaEntries = await dbService.getMediaEntries(
    db,
    urlsAll,
    rangeMin,
    rangeMax
  );
} catch (error) {
  throw new Error(error);
} finally {
  if (db) {
    dbService.closeDatabase(db);
  }
}

let url = new URL(Astro.request.url);
let origin = url.origin;
let previous: string = origin + "/" + favorites + "-" + (page - 1);
let next: string = origin + "/" + favorites + "-" + (page + 1);
mediaEntries.sort((a, b) => b.timestamp - a.timestamp);

export async function getStaticPaths() {
  return longService.getFavoritesPgPaths();
}
---

<meta charset="utf-8" />
<FaviconC />
<title>
  {"Favorites " + DateTime.fromSeconds(rangeMax).toFormat("LLLL d, yyyy")}
</title>
<link rel="stylesheet" href="/global.css" />
<div
  id="entries"
  data-media-entries={JSON.stringify(mediaEntries)}
  data-page-string={JSON.stringify(pageString)}
>
</div>
<div
  class="flex flex-col"
  style="position: fixed; top: 10px; left: 10px; size-fit"
>
  <a href={origin} class="mb-1">
    <button class="inline-block" role="button" aria-label="Light Map">
      <Image
        src={worldImage}
        alt="world icon"
        width={50}
        height={50}
        loading="eager"
      />
    </button>
  </a>
  <div class="border-b border-white mx-auto w-12"></div>
  <a href={origin + "/dark"} class="mt-3">
    <button class="inline-block" role="button" aria-label="Dark Map">
      <Image
        src={worldImageInverted}
        alt="world icon"
        width={50}
        height={50}
        loading="eager"
      />
    </button>
  </a>
</div>
<div class="pt-4 mx-auto w-fit text-center flex space-x-2">
  <p class="text-4xl font-bold text-gray-800">
    Favorites
    {DateTime.fromSeconds(rangeMax).toFormat("LLLL d, yyyy")}
  </p>
</div>
<PageManagerC
  page={page}
  previous={previous}
  next={next}
  origin={origin}
  region="favorites"
/>
<div class="pb-2 border-b border-gray-800 mx-auto w-4/5"></div>
<ol id="mediaList">
  {
    mediaEntries.map(async (item) => (
      <div class="p-2 m-2 border border-gray-600 w-3/5 mx-auto rounded-lg">
        <li>
          <a href={item.url} class="flex">
            <Image
              src={item.image_url}
              alt="media icon"
              width={1}
              height={1}
              class="size-1/6 max-w-fit max-h-fit rounded-lg"
            />
            <div class="ml-2">
              <p class="text-gray-800 font-bold"> {item.title}</p>
              <p class="text-gray-600">{item.timestamp}</p>
              <p class="text-gray-800">{item.body}</p>
            </div>
          </a>
          <div class="mt-2 mb-2 flex justify-between items-center">
            <div class="border-b border-gray-600 w-1/2" />
            <p class="text-gray-600 text-xs mx-2">GEOKEYS</p>
            <div class="border-b border-gray-600 w-1/2" />
          </div>
          {item.regions.map((region) => (
            <a href={origin + "/" + region + "-" + pageString}>
              <button
                class="inline-block p-1 mr-1 mb-2 border border-gray-600 rounded-lg"
                role="button"
              >
                <p class="text-gray-800">
                  {longService.getNameFromIso(region)}
                </p>
              </button>
            </a>
          ))}
        </li>
      </div>
    ))
  }
</ol>
<PageManagerC
  page={page}
  previous={previous}
  next={next}
  origin={origin}
  region="favorites"
/>
<div class="pb-2 border-b border-gray-800"></div>
<div class="p-2 flex mx-auto justify-between">
  <a href="https://www.flaticon.com/" title="world icons" class="text-gray-800"
    >Icons created by Pixel perfect, prettycons - Flaticon</a
  >
  <p>Organized by UTC day, shown in local time</p>
</div>
<script>
  function getIsoFromName(countryName: string): string | null {
    const isoCodes: { [key: string]: string } = {
      Andorra: "ad",
      "United Arab Emirates": "ae",
      Afghanistan: "af",
      "Antigua and Barbuda": "ag",
      Anguilla: "ai",
      Albania: "al",
      Armenia: "am",
      Angola: "ao",
      Antarctica: "aq",
      Argentina: "ar",
      "American Samoa": "as",
      Austria: "at",
      Australia: "au",
      Aruba: "aw",
      "Aland Islands": "ax",
      Azerbaijan: "az",
      "Bosnia and Herzegovina": "ba",
      Barbados: "bb",
      Bangladesh: "bd",
      Belgium: "be",
      "Burkina Faso": "bf",
      Bulgaria: "bg",
      Bahrain: "bh",
      Burundi: "bi",
      Benin: "bj",
      "Saint Barthelemy": "bl",
      Bermuda: "bm",
      Brunei: "bn",
      Bolivia: "bo",
      "Bonaire, Sint Eustatius, and Saba": "bq",
      Brazil: "br",
      Bahamas: "bs",
      Bhutan: "bt",
      "Bouvet Island": "bv",
      Botswana: "bw",
      Belarus: "by",
      Belize: "bz",
      Canada: "ca",
      "Cocos (Keeling) Islands": "cc",
      "Democratic Republic of the Congo": "cd",
      "Central African Republic": "cf",
      "Republic of the Congo": "cg",
      Switzerland: "ch",
      "Ivory Coast": "ci",
      "Cook Islands": "ck",
      Chile: "cl",
      Cameroon: "cm",
      China: "cn",
      Colombia: "co",
      "Costa Rica": "cr",
      Cuba: "cu",
      "Cape Verde": "cv",
      Curacao: "cw",
      "Christmas Island": "cx",
      Cyprus: "cy",
      "Czech Republic": "cz",
      Germany: "de",
      Djibouti: "dj",
      Denmark: "dk",
      Dominica: "dm",
      "Dominican Republic": "do",
      Algeria: "dz",
      Ecuador: "ec",
      Estonia: "ee",
      Egypt: "eg",
      "Western Sahara": "eh",
      Eritrea: "er",
      Spain: "es",
      Ethiopia: "et",
      Finland: "fi",
      Fiji: "fj",
      "Falkland Islands": "fk",
      Micronesia: "fm",
      "Faroe Islands": "fo",
      France: "fr",
      Gabon: "ga",
      "United Kingdom": "gb",
      Grenada: "gd",
      Georgia: "ge",
      "French Guiana": "gf",
      Guernsey: "gg",
      Ghana: "gh",
      Gibraltar: "gi",
      Greenland: "gl",
      Gambia: "gm",
      Guinea: "gn",
      Guadeloupe: "gp",
      "Equatorial Guinea": "gq",
      Greece: "gr",
      "South Georgia and the South Sandwich Islands": "gs",
      Guatemala: "gt",
      Guam: "gu",
      "Guinea-Bissau": "gw",
      Guyana: "gy",
      "Hong Kong": "hk",
      "Heard Island and McDonald Islands": "hm",
      Honduras: "hn",
      Croatia: "hr",
      Haiti: "ht",
      Hungary: "hu",
      Indonesia: "id",
      Ireland: "ie",
      Israel: "il",
      "Isle of Man": "im",
      India: "in",
      "British Indian Ocean Territory": "io",
      Iraq: "iq",
      Iran: "ir",
      Iceland: "is",
      Italy: "it",
      Jersey: "je",
      Jamaica: "jm",
      Jordan: "jo",
      Japan: "jp",
      Kenya: "ke",
      Kyrgyzstan: "kg",
      Cambodia: "kh",
      Kiribati: "ki",
      Comoros: "km",
      "Saint Kitts and Nevis": "kn",
      "North Korea": "kp",
      "South Korea": "kr",
      Kuwait: "kw",
      "Cayman Islands": "ky",
      Kazakhstan: "kz",
      Laos: "la",
      Lebanon: "lb",
      "Saint Lucia": "lc",
      Liechtenstein: "li",
      "Sri Lanka": "lk",
      Liberia: "lr",
      Lesotho: "ls",
      Lithuania: "lt",
      Luxembourg: "lu",
      Latvia: "lv",
      Libya: "ly",
      Morocco: "ma",
      Monaco: "mc",
      Moldova: "md",
      Montenegro: "me",
      "Saint Martin": "mf",
      Madagascar: "mg",
      "Marshall Islands": "mh",
      "North Macedonia": "mk",
      Mali: "ml",
      Myanmar: "mm",
      Mongolia: "mn",
      Macau: "mo",
      "Northern Mariana Islands": "mp",
      Martinique: "mq",
      Mauritania: "mr",
      Montserrat: "ms",
      Malta: "mt",
      Mauritius: "mu",
      Maldives: "mv",
      Malawi: "mw",
      Mexico: "mx",
      Malaysia: "my",
      Mozambique: "mz",
      Namibia: "na",
      "New Caledonia": "nc",
      Niger: "ne",
      "Norfolk Island": "nf",
      Nigeria: "ng",
      Nicaragua: "ni",
      Netherlands: "nl",
      Norway: "no",
      Nepal: "np",
      Nauru: "nr",
      Niue: "nu",
      "New Zealand": "nz",
      Oman: "om",
      Panama: "pa",
      Peru: "pe",
      "French Polynesia": "pf",
      "Papua New Guinea": "pg",
      Philippines: "ph",
      Pakistan: "pk",
      Poland: "pl",
      "Saint Pierre and Miquelon": "pm",
      "Pitcairn Islands": "pn",
      "Puerto Rico": "pr",
      Palestine: "ps",
      Portugal: "pt",
      Palau: "pw",
      Paraguay: "py",
      Qatar: "qa",
      Reunion: "re",
      Romania: "ro",
      Serbia: "rs",
      Russia: "ru",
      Rwanda: "rw",
      "Saudi Arabia": "sa",
      "Solomon Islands": "sb",
      Seychelles: "sc",
      Sudan: "sd",
      Sweden: "se",
      Singapore: "sg",
      "Saint Helena": "sh",
      Slovenia: "si",
      "Svalbard and Jan Mayen": "sj",
      Slovakia: "sk",
      "Sierra Leone": "sl",
      "San Marino": "sm",
      Senegal: "sn",
      Somalia: "so",
      Suriname: "sr",
      "South Sudan": "ss",
      "Sao Tome and Principe": "st",
      "El Salvador": "sv",
      "Sint Maarten": "sx",
      Syria: "sy",
      Eswatini: "sz",
      "Turks and Caicos Islands": "tc",
      Chad: "td",
      "French Southern Territories": "tf",
      Togo: "tg",
      Thailand: "th",
      Tajikistan: "tj",
      Tokelau: "tk",
      "East Timor": "tl",
      Turkmenistan: "tm",
      Tunisia: "tn",
      Tonga: "to",
      Turkey: "tr",
      "Trinidad and Tobago": "tt",
      Tuvalu: "tv",
      Taiwan: "tw",
      Tanzania: "tz",
      Ukraine: "ua",
      Uganda: "ug",
      "United States Minor Outlying Islands": "um",
      "United States": "us",
      Uruguay: "uy",
      Uzbekistan: "uz",
      "Vatican City": "va",
      "Saint Vincent and the Grenadines": "vc",
      Venezuela: "ve",
      "British Virgin Islands": "vg",
      "United States Virgin Islands": "vi",
      Vietnam: "vn",
      Vanuatu: "vu",
      "Wallis and Futuna": "wf",
      Samoa: "ws",
      Kosovo: "xk",
      Yemen: "ye",
      Mayotte: "yt",
      "South Africa": "za",
      Zambia: "zm",
      Zimbabwe: "zw",
    };

    return isoCodes[countryName] || null;
  }

  function getFavorites(): string[] | null {
    let item = localStorage.getItem("favorites");
    if (item === null) {
      return null;
    }

    return JSON.parse(item);
  }

  document.addEventListener("DOMContentLoaded", (_event) => {
    const mediaList = document.getElementById("mediaList");
    if (!mediaList) {
      return;
    }

    const mediaEntries = Array.from(mediaList.children);
    mediaEntries.forEach((entry) => {
      let regions: string[] = Array.from(entry.querySelectorAll("button")).map(
        (button) => {
          let content: string | null = button.textContent;
          let name = content ? getIsoFromName(content.trim()) : "";
          if (name === null) {
            return "";
          }

          return name;
        }
      );
      let favorites: string[] | null = getFavorites();
      if (favorites === null) {
        return;
      }

      let hasCommonElement: boolean = regions.some((region) =>
        favorites.includes(region)
      );
      if (!hasCommonElement) {
        entry.remove();
      }
    });
  });
</script>
<script>
  import { DateTime } from "luxon";

  function convertTimestamps() {
    const mediaList = document.getElementById("mediaList");
    if (!mediaList) {
      return;
    }

    const mediaEntries = Array.from(mediaList.children);
    mediaEntries.forEach((entry) => {
      let timeElement = Array.from(
        entry.querySelectorAll("p.text-gray-600")
      )[0];

      let timeString = timeElement.textContent;
      if (timeString === null) {
        return;
      }

      let time = parseInt(timeString);
      let localTime = DateTime.fromSeconds(time)
        .setZone(Intl.DateTimeFormat().resolvedOptions().timeZone)
        .toLocaleString(DateTime.DATETIME_FULL);
      timeElement.textContent = localTime;
    });
  }

  document.addEventListener("DOMContentLoaded", convertTimestamps);
  window.onpopstate = convertTimestamps;
</script>
