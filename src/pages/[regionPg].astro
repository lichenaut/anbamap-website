---
import { DateTime } from "luxon";
import * as dbService from "../services/db_service";
import FaviconC from "../components/FaviconC.astro";
import FavoriteC from "../components/media/FavoriteC.astro";
import { Image } from "astro:assets";
import * as longService from "../services/long_service";
import { MediaEntry } from "../services/db_service";
import PageManagerC from "../components/media/PageManagerC.astro";
import sqlite3 from "sqlite3";
import TimeScriptC from "../components/media/TimeScriptC.astro";
import worldImage from "../assets/world.png";
import worldImageInverted from "../assets/world_invert.png";

let { regionPg } = Astro.params;
if (regionPg === undefined) {
  throw new Error("Region is required");
}

let regionPgParts: string[] = regionPg.split("-");
let region: string = regionPgParts[0];
let pageString: string = regionPgParts[1];
let page: number = parseInt(pageString);
let now: number = DateTime.utc().toSeconds();
let todayStart: number = now - (now % 86400);
let rangeMin = todayStart - (page - 1) * 86400;
let rangeMax = todayStart - (page - 2) * 86400;
let mediaEntries: MediaEntry[] | null = null;
let db: sqlite3.Database | null = null;
try {
  db = dbService.getDatabase();
  let urlsRegions: Map<string, string[]> = await dbService.getUrlsRegions(
    db,
    region
  );
  mediaEntries = await dbService.getMediaEntries(
    db,
    urlsRegions,
    rangeMin,
    rangeMax
  );
} catch (error) {
  throw new Error(error);
} finally {
  if (db) {
    dbService.closeDatabase(db);
  }
}

let url = new URL(Astro.request.url);
let origin = url.origin;
let previous: string = origin + "/" + region + "-" + (page - 1);
let next: string = origin + "/" + region + "-" + (page + 1);
mediaEntries.sort((a, b) => b.timestamp - a.timestamp);

export async function getStaticPaths() {
  return longService.getRegionPgPaths();
}
---

<meta charset="utf-8" />
<FaviconC />
<title>
  {
    region.toUpperCase() +
      " " +
      DateTime.fromSeconds(rangeMax).toFormat("LLLL d, yyyy")
  }
</title>
<link rel="stylesheet" href="/global.css" />
<FavoriteC />
<div
  class="flex flex-col"
  style="position: fixed; top: 10px; left: 10px; size-fit"
>
  <a href={origin} class="mb-1">
    <button class="inline-block" role="button" aria-label="Light Map">
      <Image
        src={worldImage}
        alt="world icon"
        width={50}
        height={50}
        loading="eager"
      />
    </button>
  </a>
  <div class="border-2 border-white mx-auto w-12"></div>
  <a href={origin + "/dark"} class="mt-3">
    <button class="inline-block" role="button" aria-label="Dark Map">
      <Image
        src={worldImageInverted}
        alt="world icon"
        width={50}
        height={50}
        loading="eager"
      />
    </button>
  </a>
</div>
<div class="pt-4 mx-auto w-fit text-center flex space-x-2">
  <p class="text-4xl font-bold text-gray-800">
    {longService.getNameFromIso(region)}
    {DateTime.fromSeconds(rangeMax).toFormat("LLLL d, yyyy")}
  </p>
</div>
<PageManagerC
  page={page}
  previous={previous}
  next={next}
  origin={origin}
  region={region}
/>
<div class="pb-2 border-b border-gray-800 mx-auto w-4/5"></div>
<ol id="mediaList">
  {
    mediaEntries.map(async (item) => (
      <div class="p-2 m-2 border border-gray-600 w-3/5 mx-auto rounded-lg">
        <li>
          <a href={item.url} class="flex">
            <Image
              src={item.image_url}
              alt="media icon"
              width={1}
              height={1}
              class="size-1/6 max-w-fit max-h-fit rounded-lg"
            />
            <div class="ml-2">
              <p class="text-gray-800 font-bold"> {item.title}</p>
              <p class="text-gray-600">{item.timestamp}</p>
              <p class="text-gray-800">{item.body}</p>
            </div>
          </a>
          <div class="mt-2 mb-2 flex justify-between items-center">
            <div class="border-b border-gray-600 w-1/2" />
            <p class="text-gray-600 text-xs mx-2">GEOKEYS</p>
            <div class="border-b border-gray-600 w-1/2" />
          </div>
          {item.regions.map((region) => (
            <a href={origin + "/" + region + "-" + pageString}>
              <button
                class="inline-block p-1 mr-1 mb-2 border border-gray-600 rounded-lg"
                role="button"
              >
                <p class="text-gray-800">
                  {longService.getNameFromIso(region)}
                </p>
              </button>
            </a>
          ))}
        </li>
      </div>
    ))
  }
</ol>
<PageManagerC
  page={page}
  previous={previous}
  next={next}
  origin={origin}
  region={region}
/>
<div class="pb-2 border-b border-gray-800"></div>
<div class="p-2 flex mx-auto justify-between">
  <a href="https://www.flaticon.com/" title="world icons" class="text-gray-800"
    >Icons created by Pixel perfect, prettycons - Flaticon</a
  >
  <p>Organized by UTC day, shown in local time</p>
</div>
<TimeScriptC />
